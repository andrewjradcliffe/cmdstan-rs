// Declaration of a sum type, with CmdStan's rule two declarations without a body
// must not be adjacent
variational_algorithm = {
    !("algorithm" ~ (sep+ ~ "algorithm" ~ &sep)+)
    ~ "algorithm" ~ ("=" ~ (meanfield | fullrank))
}
variational_algorithm_as_type = { SOI ~ variational_algorithm ~ &EOI }

meanfield = { "meanfield" }
fullrank = { "fullrank" }

// Declaration of a product type, with CmdStan's rule that
// declarations of the same product type, with or without a body, must not be adjacent
variational_adapt = {
    !("adapt" ~ (sep+ ~ variational_adapt_pair)*
        ~ (sep+ ~ ("adapt" ~ (sep+ ~ variational_adapt_pair)*))+)
    ~ "adapt" ~ (sep+ ~ variational_adapt_pair)*
}
variational_adapt_as_type = { SOI ~ variational_adapt ~ &EOI }


variational_adapt_pair = {
    engaged
  | iter
}

// Two or more of the same field, directly adjacent and without a
// value, is an error.
grad_samples       = ${
    !("grad_samples" ~ (sep+ ~ "grad_samples" ~ (&sep | EOI))+)
    ~ "grad_samples" ~ ("=" ~ integer)?
}
elbo_samples       = ${
    !("elbo_samples" ~ (sep+ ~ "elbo_samples" ~ (&sep | EOI))+)
    ~ "elbo_samples" ~ ("=" ~ integer)?
}
eta       = ${
    !("eta" ~ (sep+ ~ "eta" ~ (&sep | EOI))+)
    ~ "eta" ~ ("=" ~ float)?
}
eval_elbo       = ${
    !("eval_elbo" ~ (sep+ ~ "eval_elbo" ~ (&sep | EOI))+)
    ~ "eval_elbo" ~ ("=" ~ integer)?
}
output_samples       = ${
    !("output_samples" ~ (sep+ ~ "output_samples" ~ (&sep | EOI))+)
    ~ "output_samples" ~ ("=" ~ integer)?
}

// Body of a sum type, non-unit variant
variational = { "variational" ~ (sep+ ~ variational_term)* }

variational_term = { variational_algorithm
    | iter
    | grad_samples
    | elbo_samples
    | eta
    | variational_adapt
    | tol_rel_obj
    | eval_elbo
    | output_samples
}

