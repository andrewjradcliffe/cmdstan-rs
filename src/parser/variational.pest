// Declaration of a sum type, with CmdStan's rule two declarations without a body
// must not be adjacent
variational_algorithm         = {
    !(_algorithm ~ (sep+ ~ _algorithm ~ &sep)+) ~ _algorithm ~ ("=" ~ (meanfield | fullrank))
}
variational_algorithm_as_type = { SOI ~ variational_algorithm ~ &EOI }

meanfield = { "meanfield" }
fullrank  = { "fullrank" }

// Declaration of a product type, with CmdStan's rule that
// declarations of the same product type, with or without a body, must not be adjacent
variational_adapt         = {
    !(_adapt ~ (sep+ ~ variational_adapt_pair)* ~ (sep+ ~ (_adapt ~ (sep+ ~ variational_adapt_pair)*))+)
    ~ _adapt ~ (sep+ ~ variational_adapt_pair)*
}
variational_adapt_as_type = { SOI ~ variational_adapt ~ &EOI }

variational_adapt_pair = {
    engaged
  | iter
}

// Two or more of the same field, directly adjacent and without a
// value, is an error.
grad_samples   = ${
    !(_grad_samples ~ (sep+ ~ _grad_samples ~ (&sep | EOI))+) ~ _grad_samples ~ ("=" ~ integer)?
}
elbo_samples   = ${
    !(_elbo_samples ~ (sep+ ~ _elbo_samples ~ (&sep | EOI))+) ~ _elbo_samples ~ ("=" ~ integer)?
}
eta            = ${
    !(_eta ~ (sep+ ~ _eta ~ (&sep | EOI))+) ~ _eta ~ ("=" ~ float)?
}
eval_elbo      = ${
    !(_eval_elbo ~ (sep+ ~ _eval_elbo ~ (&sep | EOI))+) ~ _eval_elbo ~ ("=" ~ integer)?
}
output_samples = ${
    !(_output_samples ~ (sep+ ~ _output_samples ~ (&sep | EOI))+)
    ~ _output_samples ~ ("=" ~ integer)?
}

// Body of a sum type, non-unit variant
variational = { "variational" ~ (sep+ ~ variational_term)* }

variational_term = {
    variational_algorithm
  | iter
  | grad_samples
  | elbo_samples
  | eta
  | variational_adapt
  | tol_rel_obj
  | eval_elbo
  | output_samples
}

_grad_samples   = _{ "grad_samples" }
_elbo_samples   = _{ "elbo_samples" }
_eta            = _{ "eta " }
_eval_elbo      = _{ "eval_elbo " }
_output_samples = _{ "output_samples" }
