// Declaration of a product type, with CmdStan's rule that
// declarations of the same product type, with or without a body, must not be adjacent
sample_adapt         = {
    !(_adapt ~ (sep+ ~ sample_adapt_pair)* ~ (sep+ ~ (_adapt ~ (sep+ ~ sample_adapt_pair)*))+)
    ~ _adapt ~ (sep+ ~ sample_adapt_pair)*
}
sample_adapt_as_type = { SOI ~ sample_adapt ~ EOI }

sample_adapt_pair = {
    engaged
  | gamma
  | delta
  | kappa
  | t0
  | init_buffer
  | term_buffer
  | window
}

// Two or more of the same field, directly adjacent and without a
// value, is an error.
gamma       = ${
    !(_gamma ~ (sep+ ~ _gamma ~ (&sep | EOI))+) ~ _gamma ~ ("=" ~ float)?
}
delta       = ${
    !(_delta ~ (sep+ ~ _delta ~ (&sep | EOI))+) ~ _delta ~ ("=" ~ float)?
}
kappa       = ${
    !(_kappa ~ (sep+ ~ _kappa ~ (&sep | EOI))+) ~ _kappa ~ ("=" ~ float)?
}
t0          = ${
    !(_t0 ~ (sep+ ~ _t0 ~ (&sep | EOI))+) ~ _t0 ~ ("=" ~ float)?
}
init_buffer = ${
    !(_init_buffer ~ (sep+ ~ _init_buffer ~ (&sep | EOI))+) ~ _init_buffer ~ ("=" ~ integer)?
}
term_buffer = ${
    !(_term_buffer ~ (sep+ ~ _term_buffer ~ (&sep | EOI))+) ~ _term_buffer ~ ("=" ~ integer)?
}
window      = ${
    !(_window ~ (sep+ ~ _window ~ (&sep | EOI))+) ~ _window ~ ("=" ~ integer)?
}

// Declaration of a sum type
sample_algorithm         = {
    !(_algorithm ~ (sep+ ~ _algorithm ~ (&sep | EOI))+)
    ~ _algorithm ~ ("=" ~ (hmc | fixed_param))?
}
sample_algorithm_as_type = { SOI ~ sample_algorithm ~ &EOI }

// Body of a sum type, unit variant
fixed_param = { "fixed_param" }

// Body of a sum type, non-unit variant
hmc = { "hmc" ~ (sep+ ~ hmc_term)* }

hmc_term = { engine | metric_file | metric | stepsize_jitter | stepsize }

stepsize = {
    !(_stepsize ~ (sep+ ~ _stepsize ~ (&sep | EOI))+) ~ _stepsize ~ ("=" ~ float)?
}

stepsize_jitter = {
    !(_stepsize_jitter ~ (sep+ ~ _stepsize_jitter ~ (&sep | EOI))+)
    ~ _stepsize_jitter ~ ("=" ~ float)?
}

metric_file = {
    !(_metric_file ~ (sep+ ~ _metric_file ~ (&sep | EOI))+) ~ _metric_file ~ ("=" ~ path)?
}

metric         =  {
    !(_metric ~ (sep+ ~ _metric ~ (&sep | EOI))+) ~ _metric ~ ("=" ~ (unit_e | diag_e | dense_e))?
}
metric_as_type = ${ SOI ~ metric ~ &EOI }

unit_e  = { "unit_e" }
diag_e  = { "diag_e" }
dense_e = { "dense_e" }

// Declaration of a sum type
engine         =  {
    !(_engine ~ (sep+ ~ _engine ~ (&sep | EOI))+) ~ _engine ~ ("=" ~ (nuts | static))?
}
engine_as_type = ${ SOI ~ engine ~ &EOI }

// Body of a sum type, non-unit variant
nuts = { "nuts" ~ (sep+ ~ max_depth)* }

max_depth = ${
    !(_max_depth ~ (sep+ ~ _max_depth ~ (&sep | EOI))+) ~ _max_depth ~ ("=" ~ integer)?
}

// Body of a sum type, non-unit variant
static = { "static" ~ (sep+ ~ int_time)* }

int_time = ${
    !(_int_time ~ (sep+ ~ _int_time ~ (&sep | EOI))+) ~ _int_time ~ ("=" ~ float)?
}

// Body of a sum type, non-unit variant
sample = { "sample" ~ (sep+ ~ sample_term)* }

sample_term = {
    num_samples
  | num_warmup
  | save_warmup
  | thin
  | sample_adapt
  | sample_algorithm
  | num_chains
}

num_samples = ${
    !(_num_samples ~ (sep+ ~ _num_samples ~ (&sep | EOI))+) ~ _num_samples ~ ("=" ~ integer)?
}
num_warmup  = ${
    !(_num_warmup ~ (sep+ ~ _num_warmup ~ (&sep | EOI))+) ~ _num_warmup ~ ("=" ~ integer)?
}
thin        = ${
    !(_thin ~ (sep+ ~ _thin ~ (&sep | EOI))+) ~ _thin ~ ("=" ~ integer)?
}
num_chains  = ${
    !(_num_chains ~ (sep+ ~ _num_chains ~ (&sep | EOI))+) ~ _num_chains ~ ("=" ~ integer)?
}
save_warmup = ${
    !(_save_warmup ~ (sep+ ~ _save_warmup ~ (&sep | EOI))+)
    ~ _save_warmup ~ ("=" ~ (false | true))?
}

_gamma           = _{ "gamma" }
_delta           = _{ "delta" }
_kappa           = _{ "kappa" }
_t0              = _{ "t0" }
_init_buffer     = _{ "init_buffer" }
_term_buffer     = _{ "term_buffer" }
_window          = _{ "window" }
_engine          = _{ "engine" }
_max_depth       = _{ "max_depth" }
_int_time        = _{ "int_time" }
_stepsize        = _{ "stepsize" }
_stepsize_jitter = _{ "stepsize_jitter" }
_metric_file     = _{ "metric_file" }
_metric          = _{ "metric" }
_num_samples     = _{ "num_samples" }
_num_warmup      = _{ "num_warmup" }
_thin            = _{ "thin" }
_num_chains      = _{ "num_chains" }
_save_warmup     = _{ "save_warmup" }
